### 자료형 ###

1. 리스트 컴프리 헨션
   - 리스트를 초기화 하는 방법중 하나
   - [] 안에 조건문과 반복문을 넣는 방식으로 리스트를 초기화 할수 있다. 
   - 한줄로 초기화 할 수 있어서 편리하다. 

예시)
# 0 부터 19까지 수 중에서 홀수만 포함하는 리스트
array = [ i for i in range(20) if i % 2 == 1]
print(array)

# 1 부터 9 까지의 수의 제곱 값을 포함하는 리스트
array = [i * i for i in range(1, 10)]
print(array)

# N X M 크기의 2차원 리스트 초기화(리스트 컴프리 헨션 초기화)
n = 3
m = 4
array = [[0] * m for _ in range(n)]
print(array)

# 언더바( _ ) 의 역할
파이썬 자료구조 알고리즘에서 반복을 수행 하되 반복을 위한 변수값을 무시하고 할때 사용

# 2차원 리스트를 초기화 할때는 반드시 리스트 컴프리핸션을 이용해야 한다. 
 - 잘못 초기화 한다면 다음과 같이 의도하지 않은 결과가 나올 수 있다. 
n = 3
m = 4
array = [[0] * m] * n
print(array)

array[1][1] = 5
print(array)

실행시 초기화가 제대로 이루어지지 않은 결과를 볼 수 있다. 

2. 리스트 관련 메서트
  2-1) append()
       - 사용법 : 변수명.append()
       - 리스트에 원소 하나를 삽입 할 떄 사용
       - 시간 복잡도 : O(1)

  2-2) sort()
       - 사용법 : 변수명.sort()
       - 기본 정렬 기능으로 오름차순으로 정렬한다.
       - 사용법2 : 변수명.sort(reverse = True)
       - 내림 차순으로 정렬 한다. 
       - 시간 복잡도 : O(NlogN)

  2-3) reverse()
       - 사용법 : 변수명.reverse()
       - 리스트 원소 순서를 뒤집어 놓는다. 
       - 시간 복잡도 : O(N)

  2-4) insert()
       - 사용법 : 변수명.insert(삽입할 위치 인덱스, 삽일 할 값)
       - 특정한 인덱스 위치에 원소를 삽입 할 때 사용
       - 시간 복잡도 : O(N)

  2-5) count()
       - 사용법 : 변수명.count(특정 값)
       - 리스트에서 특정한 값을 가지는 데이터의 개수를 셀 때 사용
       - 시간 복잡도 : O(N)

  2-6) remove()
       - 변수명.remove(특정 값)
       - 특정한 값을 갖는 원소를 제거 해야 하는데, 값을 가진 원소가 여러개면 하나만 제거한다. 
       - 시간 복잡도 : O(N)

  참고)
   insert() 함수는 동작이 느리고 중간에 원소를 삽입 이후 리스트의 원소 위치를 조정 해야 하기 떄문에 남발 하게 되면 시간을 초과 할 수 있다.
   
   파이썬에서 모든 원소를 제거 할 때 방법(다른 언어는 remove_all() 함수를 제공 하지만 파이썬은 제공 하지 않는다.)
   a = [1, 2, 3, 4, 5, 5, 5]
   remove_set = {3, 5} 

   # remove_set에 포함 되지 않은 값만을 저장 
   result = [i for i in a if i not in remove_set]
   print(result)


3. 튜플 자료형
   - 파이썬 튜플 자료형은 리스트와 거의 비슷한데 다음과 같은 차이가 있다.
   - 튜플은 한 번 선언된 값을 변경 할 수 없다.
   - 리스트는 대괄호([])를 이용하지만, 튜플은 소괄호(())를 이용한다. 
   - 값을 변경 하려 하면 에러 발생
   
   a = (1, 2, 3, 4)
   print(a)

   a[2] = 7 

   - 그래프 알고리즘을 구현 할 떄 자주 사용 된다. (다익스트라 최단 경로 알고리즘)
   - 최단경로 알고리즘에서 변경하면 안되는 값이 변경 되는지 체크 가능

4. 사전 자료형
   - 키와 값의 쌍을 테이터로 가지는 자료형 이다. 
   - 키-값 쌍으로 구성된 데이터를 처리 함에 리스트보다 훨씬 빠르게 동작 한다. 
   - 특정 원소를 찾을때 '원소 in 사전' 의 형태를 사용 할 수 있다. 
   
   data = dict()
   data['사과'] = 'Apple'
   data['바나나'] = 'Banana'
   data['코코넛'] = 'Coconut'

   if '사과' in data:
      print("사과를 키로 가지는 값이 존재 합니다. ")


### 반복문 ###

1. while문
   - 조건문이 참일때 반복적으로 수행 

# 홀수 합 구하는 예시
i = 1
result = 0

while i <= 9:
    if i % 2 == 1:
        result += i
    i += 1

print(result)

2. for문

# 블랙 리스트를 제외한 조건에 맞는 값 출력 예시
scores = [90, 85, 77, 65, 97]
cheating_list = {2, 4}

for i in range(5):
    if i + 1 in cheating_list:
        continue
    if scores[i] >= 80:
        print(i + 1, "번 학생은 합격 입니다. ")

# 구구단 출력 예시
for i in range(2, 10):
    for j in range(1, 10):
        print(i, "X", j, "=", i*j)
    print()